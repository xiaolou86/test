    Optimize predicate of pod affinity in scheduler

diff --git a/plugin/pkg/scheduler/algorithm/predicates/predicates.go b/plugin/pkg/scheduler/algorithm/predicates/predicates.go
index 7665bcc..aabce3b 100644
--- a/plugin/pkg/scheduler/algorithm/predicates/predicates.go
+++ b/plugin/pkg/scheduler/algorithm/predicates/predicates.go
@@ -909,8 +909,9 @@ func (c *PodAffinityChecker) InterPodAffinityMatches(pod *v1.Pod, meta interface
 // TODO: Do we really need any pod matching, or all pods matching? I think the latter.
 func (c *PodAffinityChecker) anyPodMatchesPodAffinityTerm(pod *v1.Pod, allPods []*v1.Pod, node *v1.Node, term *v1.PodAffinityTerm) (bool, bool, error) {
    matchingPodExists := false
+   namespaces := priorityutil.GetNamespacesFromPodAffinityTerm(pod, *term)
    for _, existingPod := range allPods {
-       match, err := priorityutil.PodMatchesTermsNamespaceAndSelector(existingPod, pod, term)
+       match, err := priorityutil.PodMatchesTermsNamespaceAndSelector(existingPod, namespaces, term)
        if err != nil {
            return false, matchingPodExists, err
        }
@@ -994,7 +995,8 @@ func getMatchingAntiAffinityTerms(pod *v1.Pod, nodeInfoMap map[string]*scheduler
                continue
            }
            for _, term := range getPodAntiAffinityTerms(affinity.PodAntiAffinity) {
-               match, err := priorityutil.PodMatchesTermsNamespaceAndSelector(pod, existingPod, &term)
+               namespaces := priorityutil.GetNamespacesFromPodAffinityTerm(existingPod, term)
+               match, err := priorityutil.PodMatchesTermsNamespaceAndSelector(pod, namespaces, &term)
                if err != nil {
                    catchError(err)
                    return
@@ -1025,7 +1027,8 @@ func (c *PodAffinityChecker) getMatchingAntiAffinityTerms(pod *v1.Pod, allPods [
                return nil, err
            }
            for _, term := range getPodAntiAffinityTerms(affinity.PodAntiAffinity) {
-               match, err := priorityutil.PodMatchesTermsNamespaceAndSelector(pod, existingPod, &term)
+               namespaces := priorityutil.GetNamespacesFromPodAffinityTerm(existingPod, term)
+               match, err := priorityutil.PodMatchesTermsNamespaceAndSelector(pod, namespaces, &term)
                if err != nil {
                    return nil, err
                }
@@ -1090,7 +1093,8 @@ func (c *PodAffinityChecker) satisfiesPodsAffinityAntiAffinity(pod *v1.Pod, node
            // If the requirement matches a pod's own labels are namespace, and there are
            // no other such pods, then disregard the requirement. This is necessary to
            // not block forever because the first pod of the collection can't be scheduled.
-           match, err := priorityutil.PodMatchesTermsNamespaceAndSelector(pod, pod, &term)
+           namespaces := priorityutil.GetNamespacesFromPodAffinityTerm(pod, term)
+           match, err := priorityutil.PodMatchesTermsNamespaceAndSelector(pod, namespaces, &term)
            if err != nil || !match || matchingPodExists {
                glog.V(10).Infof("Cannot schedule pod %+v onto node %v,because of PodAffinityTerm %v, err: %v",
                    podName(pod), node.Name, term, err)
diff --git a/plugin/pkg/scheduler/algorithm/priorities/interpod_affinity.go b/plugin/pkg/scheduler/algorithm/priorities/interpod_affinity.go
index 5f73183..1fc166f 100644
--- a/plugin/pkg/scheduler/algorithm/priorities/interpod_affinity.go
+++ b/plugin/pkg/scheduler/algorithm/priorities/interpod_affinity.go
@@ -84,7 +84,8 @@ func (p *podAffinityPriorityMap) setError(err error) {
 }

 func (p *podAffinityPriorityMap) processTerm(term *v1.PodAffinityTerm, podDefiningAffinityTerm, podToCheck *v1.Pod, fixedNode *v1.Node, weight float64) {
-   match, err := priorityutil.PodMatchesTermsNamespaceAndSelector(podToCheck, podDefiningAffinityTerm, term)
+   namespaces := priorityutil.GetNamespacesFromPodAffinityTerm(podDefiningAffinityTerm, *term)
+   match, err := priorityutil.PodMatchesTermsNamespaceAndSelector(podToCheck, namespaces, term)
    if err != nil {
        p.setError(err)
        return
diff --git a/plugin/pkg/scheduler/algorithm/priorities/util/topologies.go b/plugin/pkg/scheduler/algorithm/priorities/util/topologies.go
index e5d091c..a5db3b8 100644
--- a/plugin/pkg/scheduler/algorithm/priorities/util/topologies.go
+++ b/plugin/pkg/scheduler/algorithm/priorities/util/topologies.go
@@ -27,7 +27,7 @@ import (
 // according to the namespaces indicated in podAffinityTerm.
 // 1. If the namespaces is nil considers the given pod's namespace
 // 2. If the namespaces is empty list then considers all the namespaces
-func getNamespacesFromPodAffinityTerm(pod *v1.Pod, podAffinityTerm v1.PodAffinityTerm) sets.String {
+func GetNamespacesFromPodAffinityTerm(pod *v1.Pod, podAffinityTerm v1.PodAffinityTerm) sets.String {
    names := sets.String{}
    if podAffinityTerm.Namespaces == nil {
        names.Insert(pod.Namespace)
@@ -38,9 +38,8 @@ func getNamespacesFromPodAffinityTerm(pod *v1.Pod, podAffinityTerm v1.PodAffinit
 }

 // PodMatchesTermsNamespaceAndSelector returns true if the given <pod>
-// matches the namespace and selector defined by <affinityPod>`s <term>.
-func PodMatchesTermsNamespaceAndSelector(pod *v1.Pod, affinityPod *v1.Pod, term *v1.PodAffinityTerm) (bool, error) {
-   namespaces := getNamespacesFromPodAffinityTerm(affinityPod, *term)
+// matches the <namespaces> and selector defined by <term>.
+func PodMatchesTermsNamespaceAndSelector(pod *v1.Pod, namespaces sets.String, term *v1.PodAffinityTerm) (bool, error) {
    if len(namespaces) != 0 && !namespaces.Has(pod.Namespace) {
        return false, nil
    }
~
